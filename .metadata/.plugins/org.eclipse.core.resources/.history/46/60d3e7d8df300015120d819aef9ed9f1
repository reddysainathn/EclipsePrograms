package producerConsumer9;

/*
 * Classes in concurrent package are thread-safe,so we can access the Objects created with multiple threads,
 * We don't have to worry about thread synchronizaton
 */
import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class ProducerConsumer {

	// BlockingQueue is a data-structure,where we can add and remove Items to it
	// Queue is First-In-First_out(FIFO)
	// We can add any kind of items to it,
	// Here We choose array Type of BlockingQueue
	private static BlockingQueue<Integer> queue = new ArrayBlockingQueue<Integer>(10) {

	};

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Thread t1 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				producer();
				
			}
		});
		Thread t2 = new Thread();
	}

	/*
	 * The idea of Producer-Consumer is we have one or more thread producing
	 * things
	 */

	private static void producer() {
		// In producer we put integers randomly
		Random random = new Random();
		while (true) {
			try {
				queue.put(random.nextInt(100));
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

	}

	private void consumer() throws InterruptedException {
		// In consumer we remove integers randomly

		Random random = new Random();

		while (true) {
			Thread.sleep(100);
			if (random.nextInt(10) == 0) {
				Integer value = queue.take();
				System.out.println("Taken Value :" + value);
				System.out.println("Queue Size is :" + queue.size());
			}

		}
	}

}
