package Semaphores_13;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

public class Semaphoress {

	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		/*
		 * Basic Semaphore Usage // Semaphore maintains a count,and we refer a
		 * count as number of permits // Semaphore with one permit is basically
		 * a LOCK // We use Semaphores to control results Semaphore sem = new
		 * Semaphore(1);
		 * 
		 * // release() will increase the permit by one sem.release(); //
		 * acquire() will decrease the permit by one sem.acquire();
		 * System.out.println("Available Permits :" + sem.availablePermits());
		 */

		// newCachedThreadPool()
		ExecutorService execcutor = Executors.newCachedThreadPool();
		for (int i = 0; i < 200; i++) {
			execcutor.submit(new Runnable() {

				@Override
				public void run() {
					Connection.getInstance().connect();

				}
			});

		}
		execcutor.shutdown();
		execcutor.awaitTermination(1, TimeUnit.DAYS);
	}
}
