package producerConsumer9;

/*
 * Classes in concurrent package are thread-safe,so we can access the Objects created with multiple threads,
 * We don't have to worry about thread synchronizaton
 */
import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class ProducerConsumer {

	// BlockingQueue is a data-structure,where we can add and remove Items to it
	// Queue is First-In-First_out(FIFO)
	// We can add any kind of items to it,
	// Here We choose array Type of BlockingQueue
	private BlockingQueue<Integer> queue = new ArrayBlockingQueue<Integer>(10) {

	};

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	// The idea of Producer-Consumer is we have one or more thread producing things

	private void producer() {
		Random random = new Random();
		while (true) {
			try {
				queue.put(random.nextInt(100));
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
	}
}
